package gui;

import common.FilePreloader;
import common.ImageLoader;
import common.ImageOptionManager;
import common.MetadataLoader;
import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JFileChooser;
import metadata.decoder.ChannelMetadata;
import org.apache.log4j.Logger;
import selector.ChannelContainer;

/**
 *
 * @author Drimal
 */
public class AfmOpenerFrame extends javax.swing.JFrame {

    private Logger logger = Logger.getLogger(AfmOpenerFrame.class);
    private File currentDirectory = new File("c:\\Users\\Drimal\\Downloads\\zasilka-CHKRI8DLZPAYS4EY\\");
    private Map<File, List<Integer>> selectedChannels;
    private ImageOptionManager imageOptionManager;

    /**
     * Creates new form OpenerFrame
     */
    public AfmOpenerFrame() {
        initComponents();
        selectedChannels = new TreeMap<File, List<Integer>>();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        SelectButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        imageOptionPanel = new javax.swing.JScrollPane();
        cancelButton = new javax.swing.JButton();
        OpenButton = new javax.swing.JButton();
        selectAll = new javax.swing.JCheckBox();
        showInStack = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AFM Opener");
        setIconImages(null);
        setPreferredSize(new java.awt.Dimension(246, 455));
        setResizable(false);

        jLabel1.setText("Select folder/ file");

        nameField.setEditable(false);

        SelectButton.setText("Select");
        SelectButton.setToolTipText("Select image or directory to open");
        SelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Images / Channels");

        imageOptionPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        imageOptionPanel.setPreferredSize(new java.awt.Dimension(183, 195));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        OpenButton.setText("Open");
        OpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenButtonActionPerformed(evt);
            }
        });

        selectAll.setText("Select all:                                    ");
        selectAll.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        selectAll.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        selectAll.setMaximumSize(new java.awt.Dimension(198, 24));
        selectAll.setPreferredSize(new java.awt.Dimension(198, 24));
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllPerformed(evt);
            }
        });

        showInStack.setSelected(true);
        showInStack.setText("Show in stack:                              ");
        showInStack.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        showInStack.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        showInStack.setMaximumSize(new java.awt.Dimension(198, 24));
        showInStack.setPreferredSize(new java.awt.Dimension(198, 24));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(showInStack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(OpenButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(cancelButton))
                                .addComponent(imageOptionPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SelectButton)
                                .addComponent(nameField, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(selectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(SelectButton)
                .addGap(1, 1, 1)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(selectAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imageOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(showInStack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton)
                    .addComponent(OpenButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser(currentDirectory);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        int returnVal = fileChooser.showOpenDialog(AfmOpenerFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            currentDirectory = file.getParentFile();
            nameField.setText(file.getName());
            nameField.setToolTipText(file.getName());

            FilePreloader processor = new FilePreloader();
            Map<File, List<Integer>> allPreloadedChannels = processor.preprocess(file);
            List<ChannelContainer> channelContainer = processor.getChannelContainer();

            MetadataLoader metadataLoader = new MetadataLoader();
            metadataLoader.parseMetadata(allPreloadedChannels);
            List<ChannelMetadata> imagesMetadata = metadataLoader.getImagesMetadata();
            imageOptionManager = new ImageOptionManager(imageOptionPanel, channelContainer);
            imageOptionManager.setMetadatas(imagesMetadata);
            imageOptionManager.setChannels(allPreloadedChannels);
            imageOptionManager.run();
            selectedChannels = imageOptionManager.getSelectedChannels();
        }
    }//GEN-LAST:event_SelectButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (imageOptionManager != null && imageOptionManager.isAlive()) {
            imageOptionManager.interrupt();
        }
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void OpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenButtonActionPerformed
        logger.info("Opening files:");
        for (Map.Entry<File, List<Integer>> entry : selectedChannels.entrySet()) {
            for (Integer integer : entry.getValue()) {
                System.out.println("selected Channel: " + integer);
            }
        }
        ImageLoader loader = new ImageLoader();
        loader.makeStack(showInStack.isSelected());
        List<ChannelContainer> loadImages = loader.loadImages(selectedChannels);
        loader.showLoadedImages();
    }//GEN-LAST:event_OpenButtonActionPerformed

    private void selectAllPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllPerformed
        if (selectAll.isSelected()) {
            imageOptionManager.selectAllImages(true);
        } else {
            imageOptionManager.selectAllImages(false);
        }
        imageOptionManager.run();
        selectedChannels = imageOptionManager.getSelectedChannels();
    }//GEN-LAST:event_selectAllPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AfmOpenerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AfmOpenerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AfmOpenerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AfmOpenerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AfmOpenerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OpenButton;
    private javax.swing.JButton SelectButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane imageOptionPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField nameField;
    private javax.swing.JCheckBox selectAll;
    private javax.swing.JCheckBox showInStack;
    // End of variables declaration//GEN-END:variables
}
