package interactive.analyzer.gui;

import interactive.analyzer.graph.BarChart;
import interactive.analyzer.graph.Chart;
import interactive.analyzer.graph.GraphPanel;
import interactive.analyzer.graph.data.DataSet;
import interactive.analyzer.graph.data.DataStatistics;
import interactive.analyzer.graph.data.Pair;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.apache.log4j.Logger;

/**
 *
 * @author Drimal
 */
public class ObjectFilteringFrame extends javax.swing.JFrame {

    //TODO create barchart from selected lines
    //TODO dynamic resize margins due to label
    private static Logger logger = Logger.getLogger(ObjectFilteringFrame.class);
    private DataSet originChartData;

    /**
     * Creates new frame of ObjectFilteringFrame
     */
    public ObjectFilteringFrame() {
        initComponents();
        logger.trace("Frame width" + getWidth() + ", height=" + getHeight());
    }

    public void addChart(Chart chart) {
        graphPanel.setChart(chart);
        originChartData = chart.getData();
        graphPanel.updatePaint();
    }

    /** This method is called from within the constructor to
     * initializeZ the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jSeparator1 = new javax.swing.JSeparator();
        graphPanel = new interactive.analyzer.graph.GraphPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        Save = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        sortingMenuItem = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Object's filtering");

        graphPanel.setMinimumSize(new java.awt.Dimension(401, 249));
        graphPanel.setPreferredSize(new java.awt.Dimension(401, 249));
        graphPanel.setFocusable(true);
        graphPanel.requestFocusInWindow();

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
        );

        fileMenu.setText("File");

        Save.setText("Save graph as...");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        fileMenu.add(Save);

        jMenuBar1.add(fileMenu);

        viewMenu.setText("View");

        sortingMenuItem.setText("Sorting");
        sortingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(sortingMenuItem);

        jMenuBar1.add(viewMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
            .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 129, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        JFileChooser fc = new JFileChooser();

        fc.removeChoosableFileFilter(fc.getFileFilter());
        for (FileFilter filter : graphPanel.getFileFilters()) {
            fc.addChoosableFileFilter(filter);
        }
        int returnVal = fc.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            try {
                graphPanel.save(file, (GraphPanel.ImageFileFilter) fc.getFileFilter());
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_SaveActionPerformed

    private void sortingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortingMenuItemActionPerformed
        if (sortingMenuItem.isSelected()) {
            DataSet dataCopy = DataStatistics.createNewInstanceOfData(originChartData);
            dataCopy.sortPairsData();
            graphPanel.getChart().loadData(dataCopy);
            graphPanel.updatePaint();
        } else {
            graphPanel.getChart().loadData(originChartData);
            graphPanel.updatePaint();
        }
    }//GEN-LAST:event_sortingMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ObjectFilteringFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ObjectFilteringFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ObjectFilteringFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ObjectFilteringFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ObjectFilteringFrame frame = new ObjectFilteringFrame();
                Chart chart = new BarChart();
                DataSet dataSet = new DataSet();
                dataSet.setMinValue(35);
                dataSet.setMaxValue(140);
                dataSet.addPair(new Pair(1, 60, 1));
                dataSet.addPair(new Pair(1, 40, 2));
                dataSet.addPair(new Pair(1, 80, 3));
                dataSet.addPair(new Pair(1, 120, 4));
                dataSet.addPair(new Pair(1, 140, 5));
                dataSet.addPair(new Pair(1, 35, 6));
                dataSet.addPair(new Pair(1, 110, 7));
                dataSet.setMedian(80);

                chart.loadData(dataSet);
                frame.addChart(chart);
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenu fileMenu;
    private interactive.analyzer.graph.GraphPanel graphPanel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButtonMenuItem sortingMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
